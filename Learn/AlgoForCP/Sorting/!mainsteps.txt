selection sort = run loop from 0->n and to i->n then at each outerloop check for the min value of the rightside of the cuurent i then swap with the i by storing it in the temporary variable.
bubblesort = just swap them in PAIRS like run from 0->n then from 0->n-i-1 since at each outerloop iteration one bigger element is stored at last , as we saw in selection sort first min element is stored.
insertion sort= it is now something diffrent as it runs from 0->n but inner while conditon is moving reverse to check the correct element that is checking min.
mergesort=it is simply the mergesort funtion which is called for the smaller array and then backtracting happent o srot the array.
quicksort=it is similar to the merge sort like the qucick sort funtion is called for the partiton index then the partiton funtion will set the index of the partion to the right position at each funtion call.
countingsort=first find the max element and get an temp array of mx+1 size then after do hasing in that store count i mean, then do prefix sum in same array, now this is main take new ans array and run from 0->n check for the count of that arr[i] in temp array then ans[temp[arr[i]]-1] should be done to store the value.
radixsort=this is where the counting sort is used for the number place and ten place and so on depending on the max element so no of times the countingsort is called is len(max(element))